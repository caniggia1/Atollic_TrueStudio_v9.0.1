
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001290  08001290  00011290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001294  08001294  00011294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  20000004  0800129c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000038  0800129c  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005ce7  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001030  00000000  00000000  00025d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000348  00000000  00000000  00026d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00027090  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001ae0  00000000  00000000  00027350  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000011de  00000000  00000000  00028e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002a00e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000009b0  00000000  00000000  0002a08c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001248 	.word	0x08001248

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001248 	.word	0x08001248

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2003      	movs	r0, #3
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f000 fa75 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 fea8 	bl	8000fa4 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8ca 	bl	80003fc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8ad 	bl	80003d0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000034 	.word	0x20000034

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000034 	.word	0x20000034

080002ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b5b0      	push	{r4, r5, r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b7f      	cmp	r3, #127	; 0x7f
 80002c0:	d932      	bls.n	8000328 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c2:	4c2f      	ldr	r4, [pc, #188]	; (8000380 <NVIC_SetPriority+0xd4>)
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	001a      	movs	r2, r3
 80002ca:	230f      	movs	r3, #15
 80002cc:	4013      	ands	r3, r2
 80002ce:	3b08      	subs	r3, #8
 80002d0:	0899      	lsrs	r1, r3, #2
 80002d2:	4a2b      	ldr	r2, [pc, #172]	; (8000380 <NVIC_SetPriority+0xd4>)
 80002d4:	1dfb      	adds	r3, r7, #7
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	0018      	movs	r0, r3
 80002da:	230f      	movs	r3, #15
 80002dc:	4003      	ands	r3, r0
 80002de:	3b08      	subs	r3, #8
 80002e0:	089b      	lsrs	r3, r3, #2
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18d3      	adds	r3, r2, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	1dfa      	adds	r2, r7, #7
 80002ee:	7812      	ldrb	r2, [r2, #0]
 80002f0:	0010      	movs	r0, r2
 80002f2:	2203      	movs	r2, #3
 80002f4:	4002      	ands	r2, r0
 80002f6:	00d2      	lsls	r2, r2, #3
 80002f8:	20ff      	movs	r0, #255	; 0xff
 80002fa:	4090      	lsls	r0, r2
 80002fc:	0002      	movs	r2, r0
 80002fe:	43d2      	mvns	r2, r2
 8000300:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	019b      	lsls	r3, r3, #6
 8000306:	20ff      	movs	r0, #255	; 0xff
 8000308:	4018      	ands	r0, r3
 800030a:	1dfb      	adds	r3, r7, #7
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	001d      	movs	r5, r3
 8000310:	2303      	movs	r3, #3
 8000312:	402b      	ands	r3, r5
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	4098      	lsls	r0, r3
 8000318:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031a:	431a      	orrs	r2, r3
 800031c:	1d8b      	adds	r3, r1, #6
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	18e3      	adds	r3, r4, r3
 8000322:	3304      	adds	r3, #4
 8000324:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000326:	e027      	b.n	8000378 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4c16      	ldr	r4, [pc, #88]	; (8000384 <NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b25b      	sxtb	r3, r3
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	4914      	ldr	r1, [pc, #80]	; (8000384 <NVIC_SetPriority+0xd8>)
 8000334:	1dfa      	adds	r2, r7, #7
 8000336:	7812      	ldrb	r2, [r2, #0]
 8000338:	b252      	sxtb	r2, r2
 800033a:	0892      	lsrs	r2, r2, #2
 800033c:	32c0      	adds	r2, #192	; 0xc0
 800033e:	0092      	lsls	r2, r2, #2
 8000340:	5852      	ldr	r2, [r2, r1]
 8000342:	1df9      	adds	r1, r7, #7
 8000344:	7809      	ldrb	r1, [r1, #0]
 8000346:	0008      	movs	r0, r1
 8000348:	2103      	movs	r1, #3
 800034a:	4001      	ands	r1, r0
 800034c:	00c9      	lsls	r1, r1, #3
 800034e:	20ff      	movs	r0, #255	; 0xff
 8000350:	4088      	lsls	r0, r1
 8000352:	0001      	movs	r1, r0
 8000354:	43c9      	mvns	r1, r1
 8000356:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000358:	683a      	ldr	r2, [r7, #0]
 800035a:	0192      	lsls	r2, r2, #6
 800035c:	20ff      	movs	r0, #255	; 0xff
 800035e:	4010      	ands	r0, r2
 8000360:	1dfa      	adds	r2, r7, #7
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	0015      	movs	r5, r2
 8000366:	2203      	movs	r2, #3
 8000368:	402a      	ands	r2, r5
 800036a:	00d2      	lsls	r2, r2, #3
 800036c:	4090      	lsls	r0, r2
 800036e:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000370:	430a      	orrs	r2, r1
 8000372:	33c0      	adds	r3, #192	; 0xc0
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	511a      	str	r2, [r3, r4]
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b002      	add	sp, #8
 800037e:	bdb0      	pop	{r4, r5, r7, pc}
 8000380:	e000ed00 	.word	0xe000ed00
 8000384:	e000e100 	.word	0xe000e100

08000388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <SysTick_Config+0x40>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d901      	bls.n	800039e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2301      	movs	r3, #1
 800039c:	e010      	b.n	80003c0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <SysTick_Config+0x44>)
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	3a01      	subs	r2, #1
 80003a4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a6:	2301      	movs	r3, #1
 80003a8:	425b      	negs	r3, r3
 80003aa:	2103      	movs	r1, #3
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff ff7d 	bl	80002ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <SysTick_Config+0x44>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <SysTick_Config+0x44>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003be:	2300      	movs	r3, #0
}
 80003c0:	0018      	movs	r0, r3
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	00ffffff 	.word	0x00ffffff
 80003cc:	e000e010 	.word	0xe000e010

080003d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
 80003da:	230f      	movs	r3, #15
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	1c02      	adds	r2, r0, #0
 80003e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	230f      	movs	r3, #15
 80003e6:	18fb      	adds	r3, r7, r3
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	b25b      	sxtb	r3, r3
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f7ff ff5c 	bl	80002ac <NVIC_SetPriority>
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b004      	add	sp, #16
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	0018      	movs	r0, r3
 8000408:	f7ff ffbe 	bl	8000388 <SysTick_Config>
 800040c:	0003      	movs	r3, r0
}
 800040e:	0018      	movs	r0, r3
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800042e:	e14f      	b.n	80006d0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2101      	movs	r1, #1
 8000436:	697a      	ldr	r2, [r7, #20]
 8000438:	4091      	lsls	r1, r2
 800043a:	000a      	movs	r2, r1
 800043c:	4013      	ands	r3, r2
 800043e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d100      	bne.n	8000448 <HAL_GPIO_Init+0x30>
 8000446:	e140      	b.n	80006ca <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d003      	beq.n	8000458 <HAL_GPIO_Init+0x40>
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	2b12      	cmp	r3, #18
 8000456:	d123      	bne.n	80004a0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	08da      	lsrs	r2, r3, #3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3208      	adds	r2, #8
 8000460:	0092      	lsls	r2, r2, #2
 8000462:	58d3      	ldr	r3, [r2, r3]
 8000464:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	2207      	movs	r2, #7
 800046a:	4013      	ands	r3, r2
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	220f      	movs	r2, #15
 8000470:	409a      	lsls	r2, r3
 8000472:	0013      	movs	r3, r2
 8000474:	43da      	mvns	r2, r3
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	4013      	ands	r3, r2
 800047a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	691a      	ldr	r2, [r3, #16]
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	2107      	movs	r1, #7
 8000484:	400b      	ands	r3, r1
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	409a      	lsls	r2, r3
 800048a:	0013      	movs	r3, r2
 800048c:	693a      	ldr	r2, [r7, #16]
 800048e:	4313      	orrs	r3, r2
 8000490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	08da      	lsrs	r2, r3, #3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3208      	adds	r2, #8
 800049a:	0092      	lsls	r2, r2, #2
 800049c:	6939      	ldr	r1, [r7, #16]
 800049e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	2203      	movs	r2, #3
 80004ac:	409a      	lsls	r2, r3
 80004ae:	0013      	movs	r3, r2
 80004b0:	43da      	mvns	r2, r3
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	4013      	ands	r3, r2
 80004b6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2203      	movs	r2, #3
 80004be:	401a      	ands	r2, r3
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	409a      	lsls	r2, r3
 80004c6:	0013      	movs	r3, r2
 80004c8:	693a      	ldr	r2, [r7, #16]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	693a      	ldr	r2, [r7, #16]
 80004d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d00b      	beq.n	80004f4 <HAL_GPIO_Init+0xdc>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d007      	beq.n	80004f4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004e8:	2b11      	cmp	r3, #17
 80004ea:	d003      	beq.n	80004f4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	2b12      	cmp	r3, #18
 80004f2:	d130      	bne.n	8000556 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	2203      	movs	r2, #3
 8000500:	409a      	lsls	r2, r3
 8000502:	0013      	movs	r3, r2
 8000504:	43da      	mvns	r2, r3
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	4013      	ands	r3, r2
 800050a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	68da      	ldr	r2, [r3, #12]
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	409a      	lsls	r2, r3
 8000516:	0013      	movs	r3, r2
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	4313      	orrs	r3, r2
 800051c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	693a      	ldr	r2, [r7, #16]
 8000522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800052a:	2201      	movs	r2, #1
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	409a      	lsls	r2, r3
 8000530:	0013      	movs	r3, r2
 8000532:	43da      	mvns	r2, r3
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	4013      	ands	r3, r2
 8000538:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	091b      	lsrs	r3, r3, #4
 8000540:	2201      	movs	r2, #1
 8000542:	401a      	ands	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	409a      	lsls	r2, r3
 8000548:	0013      	movs	r3, r2
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	4313      	orrs	r3, r2
 800054e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	2203      	movs	r2, #3
 8000562:	409a      	lsls	r2, r3
 8000564:	0013      	movs	r3, r2
 8000566:	43da      	mvns	r2, r3
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	4013      	ands	r3, r2
 800056c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	409a      	lsls	r2, r3
 8000578:	0013      	movs	r3, r2
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	4313      	orrs	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	055b      	lsls	r3, r3, #21
 800058e:	4013      	ands	r3, r2
 8000590:	d100      	bne.n	8000594 <HAL_GPIO_Init+0x17c>
 8000592:	e09a      	b.n	80006ca <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000594:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <HAL_GPIO_Init+0x2d0>)
 8000596:	4a54      	ldr	r2, [pc, #336]	; (80006e8 <HAL_GPIO_Init+0x2d0>)
 8000598:	6992      	ldr	r2, [r2, #24]
 800059a:	2101      	movs	r1, #1
 800059c:	430a      	orrs	r2, r1
 800059e:	619a      	str	r2, [r3, #24]
 80005a0:	4b51      	ldr	r3, [pc, #324]	; (80006e8 <HAL_GPIO_Init+0x2d0>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	2201      	movs	r2, #1
 80005a6:	4013      	ands	r3, r2
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005ac:	4a4f      	ldr	r2, [pc, #316]	; (80006ec <HAL_GPIO_Init+0x2d4>)
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	089b      	lsrs	r3, r3, #2
 80005b2:	3302      	adds	r3, #2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	589b      	ldr	r3, [r3, r2]
 80005b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2203      	movs	r2, #3
 80005be:	4013      	ands	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	220f      	movs	r2, #15
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0013      	movs	r3, r2
 80005c8:	43da      	mvns	r2, r3
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	4013      	ands	r3, r2
 80005ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	2390      	movs	r3, #144	; 0x90
 80005d4:	05db      	lsls	r3, r3, #23
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d013      	beq.n	8000602 <HAL_GPIO_Init+0x1ea>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a44      	ldr	r2, [pc, #272]	; (80006f0 <HAL_GPIO_Init+0x2d8>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d00d      	beq.n	80005fe <HAL_GPIO_Init+0x1e6>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a43      	ldr	r2, [pc, #268]	; (80006f4 <HAL_GPIO_Init+0x2dc>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d007      	beq.n	80005fa <HAL_GPIO_Init+0x1e2>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a42      	ldr	r2, [pc, #264]	; (80006f8 <HAL_GPIO_Init+0x2e0>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d101      	bne.n	80005f6 <HAL_GPIO_Init+0x1de>
 80005f2:	2303      	movs	r3, #3
 80005f4:	e006      	b.n	8000604 <HAL_GPIO_Init+0x1ec>
 80005f6:	2305      	movs	r3, #5
 80005f8:	e004      	b.n	8000604 <HAL_GPIO_Init+0x1ec>
 80005fa:	2302      	movs	r3, #2
 80005fc:	e002      	b.n	8000604 <HAL_GPIO_Init+0x1ec>
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <HAL_GPIO_Init+0x1ec>
 8000602:	2300      	movs	r3, #0
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	2103      	movs	r1, #3
 8000608:	400a      	ands	r2, r1
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	4093      	lsls	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	4313      	orrs	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000614:	4935      	ldr	r1, [pc, #212]	; (80006ec <HAL_GPIO_Init+0x2d4>)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	089b      	lsrs	r3, r3, #2
 800061a:	3302      	adds	r3, #2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000622:	4b36      	ldr	r3, [pc, #216]	; (80006fc <HAL_GPIO_Init+0x2e4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	43da      	mvns	r2, r3
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	4013      	ands	r3, r2
 8000630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	025b      	lsls	r3, r3, #9
 800063a:	4013      	ands	r3, r2
 800063c:	d003      	beq.n	8000646 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4313      	orrs	r3, r2
 8000644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <HAL_GPIO_Init+0x2e4>)
 8000648:	693a      	ldr	r2, [r7, #16]
 800064a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <HAL_GPIO_Init+0x2e4>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	43da      	mvns	r2, r3
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	029b      	lsls	r3, r3, #10
 8000664:	4013      	ands	r3, r2
 8000666:	d003      	beq.n	8000670 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4313      	orrs	r3, r2
 800066e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <HAL_GPIO_Init+0x2e4>)
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <HAL_GPIO_Init+0x2e4>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	43da      	mvns	r2, r3
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	4013      	ands	r3, r2
 8000684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	035b      	lsls	r3, r3, #13
 800068e:	4013      	ands	r3, r2
 8000690:	d003      	beq.n	800069a <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4313      	orrs	r3, r2
 8000698:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_GPIO_Init+0x2e4>)
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_GPIO_Init+0x2e4>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	43da      	mvns	r2, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	4013      	ands	r3, r2
 80006ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	039b      	lsls	r3, r3, #14
 80006b8:	4013      	ands	r3, r2
 80006ba:	d003      	beq.n	80006c4 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <HAL_GPIO_Init+0x2e4>)
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	40da      	lsrs	r2, r3
 80006d8:	1e13      	subs	r3, r2, #0
 80006da:	d000      	beq.n	80006de <HAL_GPIO_Init+0x2c6>
 80006dc:	e6a8      	b.n	8000430 <HAL_GPIO_Init+0x18>
  } 
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b006      	add	sp, #24
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010000 	.word	0x40010000
 80006f0:	48000400 	.word	0x48000400
 80006f4:	48000800 	.word	0x48000800
 80006f8:	48000c00 	.word	0x48000c00
 80006fc:	40010400 	.word	0x40010400

08000700 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	000a      	movs	r2, r1
 800070a:	1cbb      	adds	r3, r7, #2
 800070c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	695a      	ldr	r2, [r3, #20]
 8000712:	1cbb      	adds	r3, r7, #2
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	405a      	eors	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	615a      	str	r2, [r3, #20]
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}

08000724 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2201      	movs	r2, #1
 8000742:	4013      	ands	r3, r2
 8000744:	d100      	bne.n	8000748 <HAL_RCC_OscConfig+0x18>
 8000746:	e08d      	b.n	8000864 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000748:	4bc3      	ldr	r3, [pc, #780]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	220c      	movs	r2, #12
 800074e:	4013      	ands	r3, r2
 8000750:	2b04      	cmp	r3, #4
 8000752:	d00e      	beq.n	8000772 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000754:	4bc0      	ldr	r3, [pc, #768]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	220c      	movs	r2, #12
 800075a:	4013      	ands	r3, r2
 800075c:	2b08      	cmp	r3, #8
 800075e:	d116      	bne.n	800078e <HAL_RCC_OscConfig+0x5e>
 8000760:	4bbd      	ldr	r3, [pc, #756]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	025b      	lsls	r3, r3, #9
 8000768:	401a      	ands	r2, r3
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	025b      	lsls	r3, r3, #9
 800076e:	429a      	cmp	r2, r3
 8000770:	d10d      	bne.n	800078e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000772:	4bb9      	ldr	r3, [pc, #740]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	029b      	lsls	r3, r3, #10
 800077a:	4013      	ands	r3, r2
 800077c:	d100      	bne.n	8000780 <HAL_RCC_OscConfig+0x50>
 800077e:	e070      	b.n	8000862 <HAL_RCC_OscConfig+0x132>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d000      	beq.n	800078a <HAL_RCC_OscConfig+0x5a>
 8000788:	e06b      	b.n	8000862 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e2b5      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d107      	bne.n	80007a6 <HAL_RCC_OscConfig+0x76>
 8000796:	4bb0      	ldr	r3, [pc, #704]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000798:	4aaf      	ldr	r2, [pc, #700]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0249      	lsls	r1, r1, #9
 80007a0:	430a      	orrs	r2, r1
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	e02f      	b.n	8000806 <HAL_RCC_OscConfig+0xd6>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10c      	bne.n	80007c8 <HAL_RCC_OscConfig+0x98>
 80007ae:	4baa      	ldr	r3, [pc, #680]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007b0:	4aa9      	ldr	r2, [pc, #676]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007b2:	6812      	ldr	r2, [r2, #0]
 80007b4:	49a9      	ldr	r1, [pc, #676]	; (8000a5c <HAL_RCC_OscConfig+0x32c>)
 80007b6:	400a      	ands	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	4ba7      	ldr	r3, [pc, #668]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007bc:	4aa6      	ldr	r2, [pc, #664]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007be:	6812      	ldr	r2, [r2, #0]
 80007c0:	49a7      	ldr	r1, [pc, #668]	; (8000a60 <HAL_RCC_OscConfig+0x330>)
 80007c2:	400a      	ands	r2, r1
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e01e      	b.n	8000806 <HAL_RCC_OscConfig+0xd6>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	d10e      	bne.n	80007ee <HAL_RCC_OscConfig+0xbe>
 80007d0:	4ba1      	ldr	r3, [pc, #644]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007d2:	4aa1      	ldr	r2, [pc, #644]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	02c9      	lsls	r1, r1, #11
 80007da:	430a      	orrs	r2, r1
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	4b9e      	ldr	r3, [pc, #632]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007e0:	4a9d      	ldr	r2, [pc, #628]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007e2:	6812      	ldr	r2, [r2, #0]
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	0249      	lsls	r1, r1, #9
 80007e8:	430a      	orrs	r2, r1
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e00b      	b.n	8000806 <HAL_RCC_OscConfig+0xd6>
 80007ee:	4b9a      	ldr	r3, [pc, #616]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007f0:	4a99      	ldr	r2, [pc, #612]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007f2:	6812      	ldr	r2, [r2, #0]
 80007f4:	4999      	ldr	r1, [pc, #612]	; (8000a5c <HAL_RCC_OscConfig+0x32c>)
 80007f6:	400a      	ands	r2, r1
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	4b97      	ldr	r3, [pc, #604]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007fc:	4a96      	ldr	r2, [pc, #600]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	4997      	ldr	r1, [pc, #604]	; (8000a60 <HAL_RCC_OscConfig+0x330>)
 8000802:	400a      	ands	r2, r1
 8000804:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d014      	beq.n	8000838 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800080e:	f7ff fd43 	bl	8000298 <HAL_GetTick>
 8000812:	0003      	movs	r3, r0
 8000814:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000816:	e008      	b.n	800082a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000818:	f7ff fd3e 	bl	8000298 <HAL_GetTick>
 800081c:	0002      	movs	r2, r0
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	2b64      	cmp	r3, #100	; 0x64
 8000824:	d901      	bls.n	800082a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000826:	2303      	movs	r3, #3
 8000828:	e267      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082a:	4b8b      	ldr	r3, [pc, #556]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	029b      	lsls	r3, r3, #10
 8000832:	4013      	ands	r3, r2
 8000834:	d0f0      	beq.n	8000818 <HAL_RCC_OscConfig+0xe8>
 8000836:	e015      	b.n	8000864 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000838:	f7ff fd2e 	bl	8000298 <HAL_GetTick>
 800083c:	0003      	movs	r3, r0
 800083e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000840:	e008      	b.n	8000854 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000842:	f7ff fd29 	bl	8000298 <HAL_GetTick>
 8000846:	0002      	movs	r2, r0
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	2b64      	cmp	r3, #100	; 0x64
 800084e:	d901      	bls.n	8000854 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000850:	2303      	movs	r3, #3
 8000852:	e252      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000854:	4b80      	ldr	r3, [pc, #512]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	029b      	lsls	r3, r3, #10
 800085c:	4013      	ands	r3, r2
 800085e:	d1f0      	bne.n	8000842 <HAL_RCC_OscConfig+0x112>
 8000860:	e000      	b.n	8000864 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000862:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2202      	movs	r2, #2
 800086a:	4013      	ands	r3, r2
 800086c:	d100      	bne.n	8000870 <HAL_RCC_OscConfig+0x140>
 800086e:	e069      	b.n	8000944 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000870:	4b79      	ldr	r3, [pc, #484]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	220c      	movs	r2, #12
 8000876:	4013      	ands	r3, r2
 8000878:	d00b      	beq.n	8000892 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800087a:	4b77      	ldr	r3, [pc, #476]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	220c      	movs	r2, #12
 8000880:	4013      	ands	r3, r2
 8000882:	2b08      	cmp	r3, #8
 8000884:	d11c      	bne.n	80008c0 <HAL_RCC_OscConfig+0x190>
 8000886:	4b74      	ldr	r3, [pc, #464]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	025b      	lsls	r3, r3, #9
 800088e:	4013      	ands	r3, r2
 8000890:	d116      	bne.n	80008c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000892:	4b71      	ldr	r3, [pc, #452]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2202      	movs	r2, #2
 8000898:	4013      	ands	r3, r2
 800089a:	d005      	beq.n	80008a8 <HAL_RCC_OscConfig+0x178>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d001      	beq.n	80008a8 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e228      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008a8:	4a6b      	ldr	r2, [pc, #428]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80008aa:	4b6b      	ldr	r3, [pc, #428]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	21f8      	movs	r1, #248	; 0xf8
 80008b0:	438b      	bics	r3, r1
 80008b2:	0019      	movs	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	430b      	orrs	r3, r1
 80008bc:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008be:	e041      	b.n	8000944 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d024      	beq.n	8000912 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008c8:	4b63      	ldr	r3, [pc, #396]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80008ca:	4a63      	ldr	r2, [pc, #396]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80008cc:	6812      	ldr	r2, [r2, #0]
 80008ce:	2101      	movs	r1, #1
 80008d0:	430a      	orrs	r2, r1
 80008d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d4:	f7ff fce0 	bl	8000298 <HAL_GetTick>
 80008d8:	0003      	movs	r3, r0
 80008da:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008dc:	e008      	b.n	80008f0 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008de:	f7ff fcdb 	bl	8000298 <HAL_GetTick>
 80008e2:	0002      	movs	r2, r0
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d901      	bls.n	80008f0 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80008ec:	2303      	movs	r3, #3
 80008ee:	e204      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f0:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2202      	movs	r2, #2
 80008f6:	4013      	ands	r3, r2
 80008f8:	d0f1      	beq.n	80008de <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008fa:	4a57      	ldr	r2, [pc, #348]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80008fc:	4b56      	ldr	r3, [pc, #344]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	21f8      	movs	r1, #248	; 0xf8
 8000902:	438b      	bics	r3, r1
 8000904:	0019      	movs	r1, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	430b      	orrs	r3, r1
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	e018      	b.n	8000944 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000912:	4b51      	ldr	r3, [pc, #324]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000914:	4a50      	ldr	r2, [pc, #320]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	438a      	bics	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091e:	f7ff fcbb 	bl	8000298 <HAL_GetTick>
 8000922:	0003      	movs	r3, r0
 8000924:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000926:	e008      	b.n	800093a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000928:	f7ff fcb6 	bl	8000298 <HAL_GetTick>
 800092c:	0002      	movs	r2, r0
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	2b02      	cmp	r3, #2
 8000934:	d901      	bls.n	800093a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000936:	2303      	movs	r3, #3
 8000938:	e1df      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2202      	movs	r2, #2
 8000940:	4013      	ands	r3, r2
 8000942:	d1f1      	bne.n	8000928 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2208      	movs	r2, #8
 800094a:	4013      	ands	r3, r2
 800094c:	d036      	beq.n	80009bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d019      	beq.n	800098a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000956:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000958:	4a3f      	ldr	r2, [pc, #252]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 800095a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000962:	f7ff fc99 	bl	8000298 <HAL_GetTick>
 8000966:	0003      	movs	r3, r0
 8000968:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800096a:	e008      	b.n	800097e <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800096c:	f7ff fc94 	bl	8000298 <HAL_GetTick>
 8000970:	0002      	movs	r2, r0
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b02      	cmp	r3, #2
 8000978:	d901      	bls.n	800097e <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 800097a:	2303      	movs	r3, #3
 800097c:	e1bd      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000982:	2202      	movs	r2, #2
 8000984:	4013      	ands	r3, r2
 8000986:	d0f1      	beq.n	800096c <HAL_RCC_OscConfig+0x23c>
 8000988:	e018      	b.n	80009bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800098a:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 800098c:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 800098e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000990:	2101      	movs	r1, #1
 8000992:	438a      	bics	r2, r1
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000996:	f7ff fc7f 	bl	8000298 <HAL_GetTick>
 800099a:	0003      	movs	r3, r0
 800099c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800099e:	e008      	b.n	80009b2 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a0:	f7ff fc7a 	bl	8000298 <HAL_GetTick>
 80009a4:	0002      	movs	r2, r0
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d901      	bls.n	80009b2 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80009ae:	2303      	movs	r3, #3
 80009b0:	e1a3      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	2202      	movs	r2, #2
 80009b8:	4013      	ands	r3, r2
 80009ba:	d1f1      	bne.n	80009a0 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2204      	movs	r2, #4
 80009c2:	4013      	ands	r3, r2
 80009c4:	d100      	bne.n	80009c8 <HAL_RCC_OscConfig+0x298>
 80009c6:	e0b5      	b.n	8000b34 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009c8:	2317      	movs	r3, #23
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80009d2:	69da      	ldr	r2, [r3, #28]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	055b      	lsls	r3, r3, #21
 80009d8:	4013      	ands	r3, r2
 80009da:	d111      	bne.n	8000a00 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80009e0:	69d2      	ldr	r2, [r2, #28]
 80009e2:	2180      	movs	r1, #128	; 0x80
 80009e4:	0549      	lsls	r1, r1, #21
 80009e6:	430a      	orrs	r2, r1
 80009e8:	61da      	str	r2, [r3, #28]
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 80009ec:	69da      	ldr	r2, [r3, #28]
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	055b      	lsls	r3, r3, #21
 80009f2:	4013      	ands	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80009f8:	2317      	movs	r3, #23
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_RCC_OscConfig+0x334>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	d11a      	bne.n	8000a42 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_RCC_OscConfig+0x334>)
 8000a0e:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <HAL_RCC_OscConfig+0x334>)
 8000a10:	6812      	ldr	r2, [r2, #0]
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	0049      	lsls	r1, r1, #1
 8000a16:	430a      	orrs	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a1a:	f7ff fc3d 	bl	8000298 <HAL_GetTick>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a22:	e008      	b.n	8000a36 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a24:	f7ff fc38 	bl	8000298 <HAL_GetTick>
 8000a28:	0002      	movs	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b64      	cmp	r3, #100	; 0x64
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e161      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_RCC_OscConfig+0x334>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4013      	ands	r3, r2
 8000a40:	d0f0      	beq.n	8000a24 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d10e      	bne.n	8000a68 <HAL_RCC_OscConfig+0x338>
 8000a4a:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000a4c:	4a02      	ldr	r2, [pc, #8]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000a4e:	6a12      	ldr	r2, [r2, #32]
 8000a50:	2101      	movs	r1, #1
 8000a52:	430a      	orrs	r2, r1
 8000a54:	621a      	str	r2, [r3, #32]
 8000a56:	e035      	b.n	8000ac4 <HAL_RCC_OscConfig+0x394>
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	fffeffff 	.word	0xfffeffff
 8000a60:	fffbffff 	.word	0xfffbffff
 8000a64:	40007000 	.word	0x40007000
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10c      	bne.n	8000a8a <HAL_RCC_OscConfig+0x35a>
 8000a70:	4ba4      	ldr	r3, [pc, #656]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000a72:	4aa4      	ldr	r2, [pc, #656]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000a74:	6a12      	ldr	r2, [r2, #32]
 8000a76:	2101      	movs	r1, #1
 8000a78:	438a      	bics	r2, r1
 8000a7a:	621a      	str	r2, [r3, #32]
 8000a7c:	4ba1      	ldr	r3, [pc, #644]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000a7e:	4aa1      	ldr	r2, [pc, #644]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000a80:	6a12      	ldr	r2, [r2, #32]
 8000a82:	2104      	movs	r1, #4
 8000a84:	438a      	bics	r2, r1
 8000a86:	621a      	str	r2, [r3, #32]
 8000a88:	e01c      	b.n	8000ac4 <HAL_RCC_OscConfig+0x394>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b05      	cmp	r3, #5
 8000a90:	d10c      	bne.n	8000aac <HAL_RCC_OscConfig+0x37c>
 8000a92:	4b9c      	ldr	r3, [pc, #624]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000a94:	4a9b      	ldr	r2, [pc, #620]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000a96:	6a12      	ldr	r2, [r2, #32]
 8000a98:	2104      	movs	r1, #4
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	621a      	str	r2, [r3, #32]
 8000a9e:	4b99      	ldr	r3, [pc, #612]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000aa0:	4a98      	ldr	r2, [pc, #608]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000aa2:	6a12      	ldr	r2, [r2, #32]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	621a      	str	r2, [r3, #32]
 8000aaa:	e00b      	b.n	8000ac4 <HAL_RCC_OscConfig+0x394>
 8000aac:	4b95      	ldr	r3, [pc, #596]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000aae:	4a95      	ldr	r2, [pc, #596]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000ab0:	6a12      	ldr	r2, [r2, #32]
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	438a      	bics	r2, r1
 8000ab6:	621a      	str	r2, [r3, #32]
 8000ab8:	4b92      	ldr	r3, [pc, #584]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000aba:	4a92      	ldr	r2, [pc, #584]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000abc:	6a12      	ldr	r2, [r2, #32]
 8000abe:	2104      	movs	r1, #4
 8000ac0:	438a      	bics	r2, r1
 8000ac2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d014      	beq.n	8000af6 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000acc:	f7ff fbe4 	bl	8000298 <HAL_GetTick>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad4:	e009      	b.n	8000aea <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad6:	f7ff fbdf 	bl	8000298 <HAL_GetTick>
 8000ada:	0002      	movs	r2, r0
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	4a89      	ldr	r2, [pc, #548]	; (8000d08 <HAL_RCC_OscConfig+0x5d8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d901      	bls.n	8000aea <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e107      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aea:	4b86      	ldr	r3, [pc, #536]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000aec:	6a1b      	ldr	r3, [r3, #32]
 8000aee:	2202      	movs	r2, #2
 8000af0:	4013      	ands	r3, r2
 8000af2:	d0f0      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x3a6>
 8000af4:	e013      	b.n	8000b1e <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000af6:	f7ff fbcf 	bl	8000298 <HAL_GetTick>
 8000afa:	0003      	movs	r3, r0
 8000afc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000afe:	e009      	b.n	8000b14 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b00:	f7ff fbca 	bl	8000298 <HAL_GetTick>
 8000b04:	0002      	movs	r2, r0
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	4a7f      	ldr	r2, [pc, #508]	; (8000d08 <HAL_RCC_OscConfig+0x5d8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e0f2      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b14:	4b7b      	ldr	r3, [pc, #492]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	2202      	movs	r2, #2
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d1f0      	bne.n	8000b00 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b1e:	2317      	movs	r3, #23
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d105      	bne.n	8000b34 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b28:	4b76      	ldr	r3, [pc, #472]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b2a:	4a76      	ldr	r2, [pc, #472]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b2c:	69d2      	ldr	r2, [r2, #28]
 8000b2e:	4977      	ldr	r1, [pc, #476]	; (8000d0c <HAL_RCC_OscConfig+0x5dc>)
 8000b30:	400a      	ands	r2, r1
 8000b32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2210      	movs	r2, #16
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	d063      	beq.n	8000c06 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d12a      	bne.n	8000b9c <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b46:	4b6f      	ldr	r3, [pc, #444]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b48:	4a6e      	ldr	r2, [pc, #440]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000b52:	4b6c      	ldr	r3, [pc, #432]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b54:	4a6b      	ldr	r2, [pc, #428]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b58:	2101      	movs	r1, #1
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fb9b 	bl	8000298 <HAL_GetTick>
 8000b62:	0003      	movs	r3, r0
 8000b64:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b68:	f7ff fb96 	bl	8000298 <HAL_GetTick>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e0bf      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b7a:	4b62      	ldr	r3, [pc, #392]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4013      	ands	r3, r2
 8000b82:	d0f1      	beq.n	8000b68 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b84:	4a5f      	ldr	r2, [pc, #380]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b86:	4b5f      	ldr	r3, [pc, #380]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8a:	21f8      	movs	r1, #248	; 0xf8
 8000b8c:	438b      	bics	r3, r1
 8000b8e:	0019      	movs	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	430b      	orrs	r3, r1
 8000b98:	6353      	str	r3, [r2, #52]	; 0x34
 8000b9a:	e034      	b.n	8000c06 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	3305      	adds	r3, #5
 8000ba2:	d111      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ba4:	4b57      	ldr	r3, [pc, #348]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000ba6:	4a57      	ldr	r2, [pc, #348]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000ba8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000baa:	2104      	movs	r1, #4
 8000bac:	438a      	bics	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bb0:	4a54      	ldr	r2, [pc, #336]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000bb2:	4b54      	ldr	r3, [pc, #336]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	21f8      	movs	r1, #248	; 0xf8
 8000bb8:	438b      	bics	r3, r1
 8000bba:	0019      	movs	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	6353      	str	r3, [r2, #52]	; 0x34
 8000bc6:	e01e      	b.n	8000c06 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bc8:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000bca:	4a4e      	ldr	r2, [pc, #312]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000bcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bce:	2104      	movs	r1, #4
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000bd4:	4b4b      	ldr	r3, [pc, #300]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000bd6:	4a4b      	ldr	r2, [pc, #300]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bda:	2101      	movs	r1, #1
 8000bdc:	438a      	bics	r2, r1
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be0:	f7ff fb5a 	bl	8000298 <HAL_GetTick>
 8000be4:	0003      	movs	r3, r0
 8000be6:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000be8:	e008      	b.n	8000bfc <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bea:	f7ff fb55 	bl	8000298 <HAL_GetTick>
 8000bee:	0002      	movs	r2, r0
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d901      	bls.n	8000bfc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e07e      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bfc:	4b41      	ldr	r3, [pc, #260]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c00:	2202      	movs	r2, #2
 8000c02:	4013      	ands	r3, r2
 8000c04:	d1f1      	bne.n	8000bea <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d100      	bne.n	8000c10 <HAL_RCC_OscConfig+0x4e0>
 8000c0e:	e073      	b.n	8000cf8 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c10:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	220c      	movs	r2, #12
 8000c16:	4013      	ands	r3, r2
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d100      	bne.n	8000c1e <HAL_RCC_OscConfig+0x4ee>
 8000c1c:	e06a      	b.n	8000cf4 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d14b      	bne.n	8000cbe <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c28:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	4938      	ldr	r1, [pc, #224]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000c2e:	400a      	ands	r2, r1
 8000c30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c32:	f7ff fb31 	bl	8000298 <HAL_GetTick>
 8000c36:	0003      	movs	r3, r0
 8000c38:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c3c:	f7ff fb2c 	bl	8000298 <HAL_GetTick>
 8000c40:	0002      	movs	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e055      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	049b      	lsls	r3, r3, #18
 8000c56:	4013      	ands	r3, r2
 8000c58:	d1f0      	bne.n	8000c3c <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c5a:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	210f      	movs	r1, #15
 8000c62:	438b      	bics	r3, r1
 8000c64:	0019      	movs	r1, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c6e:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4927      	ldr	r1, [pc, #156]	; (8000d14 <HAL_RCC_OscConfig+0x5e4>)
 8000c76:	4019      	ands	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c80:	4303      	orrs	r3, r0
 8000c82:	430b      	orrs	r3, r1
 8000c84:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c88:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000c8a:	6812      	ldr	r2, [r2, #0]
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	0449      	lsls	r1, r1, #17
 8000c90:	430a      	orrs	r2, r1
 8000c92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fb00 	bl	8000298 <HAL_GetTick>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c9c:	e008      	b.n	8000cb0 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c9e:	f7ff fafb 	bl	8000298 <HAL_GetTick>
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e024      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	049b      	lsls	r3, r3, #18
 8000cb8:	4013      	ands	r3, r2
 8000cba:	d0f0      	beq.n	8000c9e <HAL_RCC_OscConfig+0x56e>
 8000cbc:	e01c      	b.n	8000cf8 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000cc0:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	4912      	ldr	r1, [pc, #72]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cca:	f7ff fae5 	bl	8000298 <HAL_GetTick>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd4:	f7ff fae0 	bl	8000298 <HAL_GetTick>
 8000cd8:	0002      	movs	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e009      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <HAL_RCC_OscConfig+0x5d4>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	049b      	lsls	r3, r3, #18
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d1f0      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x5a4>
 8000cf2:	e001      	b.n	8000cf8 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b006      	add	sp, #24
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40021000 	.word	0x40021000
 8000d08:	00001388 	.word	0x00001388
 8000d0c:	efffffff 	.word	0xefffffff
 8000d10:	feffffff 	.word	0xfeffffff
 8000d14:	ffc2ffff 	.word	0xffc2ffff

08000d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d26:	4b69      	ldr	r3, [pc, #420]	; (8000ecc <HAL_RCC_ClockConfig+0x1b4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d211      	bcs.n	8000d58 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d34:	4b65      	ldr	r3, [pc, #404]	; (8000ecc <HAL_RCC_ClockConfig+0x1b4>)
 8000d36:	4a65      	ldr	r2, [pc, #404]	; (8000ecc <HAL_RCC_ClockConfig+0x1b4>)
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	438a      	bics	r2, r1
 8000d3e:	0011      	movs	r1, r2
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d46:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <HAL_RCC_ClockConfig+0x1b4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d001      	beq.n	8000d58 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e0b5      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d009      	beq.n	8000d76 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d62:	4a5b      	ldr	r2, [pc, #364]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d64:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	21f0      	movs	r1, #240	; 0xf0
 8000d6a:	438b      	bics	r3, r1
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	430b      	orrs	r3, r1
 8000d74:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d100      	bne.n	8000d82 <HAL_RCC_ClockConfig+0x6a>
 8000d80:	e067      	b.n	8000e52 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d107      	bne.n	8000d9a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	029b      	lsls	r3, r3, #10
 8000d92:	4013      	ands	r3, r2
 8000d94:	d114      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e094      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d107      	bne.n	8000db2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da2:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	049b      	lsls	r3, r3, #18
 8000daa:	4013      	ands	r3, r2
 8000dac:	d108      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e088      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db2:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2202      	movs	r2, #2
 8000db8:	4013      	ands	r3, r2
 8000dba:	d101      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e081      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dc0:	4a43      	ldr	r2, [pc, #268]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000dc2:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	438b      	bics	r3, r1
 8000dca:	0019      	movs	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	430b      	orrs	r3, r1
 8000dd2:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dd4:	f7ff fa60 	bl	8000298 <HAL_GetTick>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d111      	bne.n	8000e08 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de4:	e009      	b.n	8000dfa <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de6:	f7ff fa57 	bl	8000298 <HAL_GetTick>
 8000dea:	0002      	movs	r2, r0
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	4a38      	ldr	r2, [pc, #224]	; (8000ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e064      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	220c      	movs	r2, #12
 8000e00:	4013      	ands	r3, r2
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d1ef      	bne.n	8000de6 <HAL_RCC_ClockConfig+0xce>
 8000e06:	e024      	b.n	8000e52 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d11b      	bne.n	8000e48 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e10:	e009      	b.n	8000e26 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e12:	f7ff fa41 	bl	8000298 <HAL_GetTick>
 8000e16:	0002      	movs	r2, r0
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e04e      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e26:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d1ef      	bne.n	8000e12 <HAL_RCC_ClockConfig+0xfa>
 8000e32:	e00e      	b.n	8000e52 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e34:	f7ff fa30 	bl	8000298 <HAL_GetTick>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	4a25      	ldr	r2, [pc, #148]	; (8000ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e03d      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	220c      	movs	r2, #12
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d1f0      	bne.n	8000e34 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HAL_RCC_ClockConfig+0x1b4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2201      	movs	r2, #1
 8000e58:	401a      	ands	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d911      	bls.n	8000e84 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_RCC_ClockConfig+0x1b4>)
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_RCC_ClockConfig+0x1b4>)
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	2101      	movs	r1, #1
 8000e68:	438a      	bics	r2, r1
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_RCC_ClockConfig+0x1b4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	401a      	ands	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d001      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e01f      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2204      	movs	r2, #4
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d008      	beq.n	8000ea0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4910      	ldr	r1, [pc, #64]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e96:	4019      	ands	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ea0:	f000 f820 	bl	8000ee4 <HAL_RCC_GetSysClockFreq>
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	220f      	movs	r2, #15
 8000eae:	4013      	ands	r3, r2
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_RCC_ClockConfig+0x1c4>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	000a      	movs	r2, r1
 8000eb6:	40da      	lsrs	r2, r3
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8000eba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f7ff f9c3 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b004      	add	sp, #16
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	00001388 	.word	0x00001388
 8000ed8:	fffff8ff 	.word	0xfffff8ff
 8000edc:	08001280 	.word	0x08001280
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b08f      	sub	sp, #60	; 0x3c
 8000ee8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000eea:	2314      	movs	r3, #20
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_RCC_GetSysClockFreq+0xac>)
 8000ef0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ef2:	c313      	stmia	r3!, {r0, r1, r4}
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000efc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000efe:	c313      	stmia	r3!, {r0, r1, r4}
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	220c      	movs	r2, #12
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d002      	beq.n	8000f2e <HAL_RCC_GetSysClockFreq+0x4a>
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d003      	beq.n	8000f34 <HAL_RCC_GetSysClockFreq+0x50>
 8000f2c:	e027      	b.n	8000f7e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f32:	e027      	b.n	8000f84 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f36:	0c9b      	lsrs	r3, r3, #18
 8000f38:	220f      	movs	r2, #15
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2214      	movs	r2, #20
 8000f3e:	18ba      	adds	r2, r7, r2
 8000f40:	5cd3      	ldrb	r3, [r2, r3]
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	220f      	movs	r2, #15
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	1d3a      	adds	r2, r7, #4
 8000f4e:	5cd3      	ldrb	r3, [r2, r3]
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	025b      	lsls	r3, r3, #9
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d009      	beq.n	8000f70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f5e:	480f      	ldr	r0, [pc, #60]	; (8000f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f60:	f7ff f8d2 	bl	8000108 <__udivsi3>
 8000f64:	0003      	movs	r3, r0
 8000f66:	001a      	movs	r2, r3
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	4353      	muls	r3, r2
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f6e:	e003      	b.n	8000f78 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f74:	4353      	muls	r3, r2
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f7c:	e002      	b.n	8000f84 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f82:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b00f      	add	sp, #60	; 0x3c
 8000f8c:	bd90      	pop	{r4, r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	08001260 	.word	0x08001260
 8000f94:	08001270 	.word	0x08001270
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	007a1200 	.word	0x007a1200
 8000fa0:	003d0900 	.word	0x003d0900

08000fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t msNow, msBefore=0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
         timer for example or other time source), keeping in mind that Time base 
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 8000fc2:	f7ff f92d 	bl	8000220 <HAL_Init>

  /* Configure the system clock to 48 MHz */
  SystemClock_Config();
 8000fc6:	f000 f853 	bl	8001070 <SystemClock_Config>
  
  /* -1- Enable each GPIO Clock (to be able to program the configuration registers) */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <main+0xac>)
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <main+0xac>)
 8000fce:	6952      	ldr	r2, [r2, #20]
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	0309      	lsls	r1, r1, #12
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <main+0xac>)
 8000fda:	695a      	ldr	r2, [r3, #20]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	031b      	lsls	r3, r3, #12
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /* -2- Configure IOs in output push-pull mode to drive external LEDs */
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <main+0xb0>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <main+0xb0>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <main+0xb0>)
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <main+0xb0>)
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <main+0xb0>)
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <main+0xb4>)
 8001004:	0019      	movs	r1, r3
 8001006:	0010      	movs	r0, r2
 8001008:	f7ff fa06 	bl	8000418 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <main+0xb0>)
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	0052      	lsls	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <main+0xb0>)
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <main+0xb4>)
 8001018:	0019      	movs	r1, r3
 800101a:	0010      	movs	r0, r2
 800101c:	f7ff f9fc 	bl	8000418 <HAL_GPIO_Init>

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4a11      	ldr	r2, [pc, #68]	; (800106c <main+0xb4>)
 8001026:	0019      	movs	r1, r3
 8001028:	0010      	movs	r0, r2
 800102a:	f7ff fb69 	bl	8000700 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
    HAL_Delay(200);
*/

    msNow = HAL_GetTick();
 800102e:	f7ff f933 	bl	8000298 <HAL_GetTick>
 8001032:	0003      	movs	r3, r0
 8001034:	60bb      	str	r3, [r7, #8]
    if (msNow - msBefore > 200) {				// Non Blocking Blinking
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2bc8      	cmp	r3, #200	; 0xc8
 800103e:	d9f6      	bls.n	800102e <main+0x76>
    	msBefore = msNow;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <main+0xb4>)
 800104a:	0019      	movs	r1, r3
 800104c:	0010      	movs	r0, r2
 800104e:	f7ff fb57 	bl	8000700 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <main+0xb4>)
 8001058:	0019      	movs	r1, r3
 800105a:	0010      	movs	r0, r2
 800105c:	f7ff fb50 	bl	8000700 <HAL_GPIO_TogglePin>
    msNow = HAL_GetTick();
 8001060:	e7e5      	b.n	800102e <main+0x76>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	40021000 	.word	0x40021000
 8001068:	20000020 	.word	0x20000020
 800106c:	48000800 	.word	0x48000800

08001070 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b090      	sub	sp, #64	; 0x40
 8001074:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Select HSE Oscillator as PLL source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001076:	003b      	movs	r3, r7
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107c:	003b      	movs	r3, r7
 800107e:	2201      	movs	r2, #1
 8001080:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	003b      	movs	r3, r7
 8001084:	2202      	movs	r2, #2
 8001086:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001088:	003b      	movs	r3, r7
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	0252      	lsls	r2, r2, #9
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001090:	003b      	movs	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001096:	003b      	movs	r3, r7
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	0352      	lsls	r2, r2, #13
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800109e:	003b      	movs	r3, r7
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff fb45 	bl	8000730 <HAL_RCC_OscConfig>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x3e>
  {
    Error_Handler();
 80010aa:	f000 f81e 	bl	80010ea <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK and PCLK1 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80010ae:	2330      	movs	r3, #48	; 0x30
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	2207      	movs	r2, #7
 80010b4:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b6:	2330      	movs	r3, #48	; 0x30
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2202      	movs	r2, #2
 80010bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2330      	movs	r3, #48	; 0x30
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2330      	movs	r3, #48	; 0x30
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 80010ce:	2330      	movs	r3, #48	; 0x30
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2101      	movs	r1, #1
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fe1f 	bl	8000d18 <HAL_RCC_ClockConfig>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010de:	f000 f804 	bl	80010ea <Error_Handler>
  }
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b010      	add	sp, #64	; 0x40
 80010e8:	bd80      	pop	{r7, pc}

080010ea <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 80010ee:	e7fe      	b.n	80010ee <Error_Handler+0x4>

080010f0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001118:	f7ff f8b2 	bl	8000280 <HAL_IncTick>
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <SystemInit+0x70>)
 800112a:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <SystemInit+0x70>)
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	2101      	movs	r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <SystemInit+0x70>)
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <SystemInit+0x70>)
 8001138:	6852      	ldr	r2, [r2, #4]
 800113a:	4917      	ldr	r1, [pc, #92]	; (8001198 <SystemInit+0x74>)
 800113c:	400a      	ands	r2, r1
 800113e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <SystemInit+0x70>)
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <SystemInit+0x70>)
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	4915      	ldr	r1, [pc, #84]	; (800119c <SystemInit+0x78>)
 8001148:	400a      	ands	r2, r1
 800114a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <SystemInit+0x70>)
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <SystemInit+0x70>)
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	4913      	ldr	r1, [pc, #76]	; (80011a0 <SystemInit+0x7c>)
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <SystemInit+0x70>)
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <SystemInit+0x70>)
 800115c:	6852      	ldr	r2, [r2, #4]
 800115e:	4911      	ldr	r1, [pc, #68]	; (80011a4 <SystemInit+0x80>)
 8001160:	400a      	ands	r2, r1
 8001162:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <SystemInit+0x70>)
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <SystemInit+0x70>)
 8001168:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800116a:	210f      	movs	r1, #15
 800116c:	438a      	bics	r2, r1
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <SystemInit+0x70>)
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <SystemInit+0x70>)
 8001174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001176:	490c      	ldr	r1, [pc, #48]	; (80011a8 <SystemInit+0x84>)
 8001178:	400a      	ands	r2, r1
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SystemInit+0x70>)
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <SystemInit+0x70>)
 8001180:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001182:	2101      	movs	r1, #1
 8001184:	438a      	bics	r2, r1
 8001186:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <SystemInit+0x70>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]

}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	08ffb80c 	.word	0x08ffb80c
 800119c:	fef6ffff 	.word	0xfef6ffff
 80011a0:	fffbffff 	.word	0xfffbffff
 80011a4:	ffc0ffff 	.word	0xffc0ffff
 80011a8:	fffffeec 	.word	0xfffffeec

080011ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011b2:	e003      	b.n	80011bc <LoopCopyDataInit>

080011b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80011b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011ba:	3104      	adds	r1, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <LoopForever+0xa>)
  ldr r3, =_edata
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <LoopForever+0xe>)
  adds r2, r0, r1
 80011c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011c4:	d3f6      	bcc.n	80011b4 <CopyDataInit>
  ldr r2, =_sbss
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <LoopForever+0x12>)
  b LoopFillZerobss
 80011c8:	e002      	b.n	80011d0 <LoopFillZerobss>

080011ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  str  r3, [r2]
 80011cc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ce:	3204      	adds	r2, #4

080011d0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <LoopForever+0x16>)
  cmp r2, r3
 80011d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011d4:	d3f9      	bcc.n	80011ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011d6:	f7ff ffa5 	bl	8001124 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011da:	f000 f811 	bl	8001200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011de:	f7ff feeb 	bl	8000fb8 <main>

080011e2 <LoopForever>:

LoopForever:
    b LoopForever
 80011e2:	e7fe      	b.n	80011e2 <LoopForever>
  ldr   r0, =_estack
 80011e4:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 80011e8:	08001298 	.word	0x08001298
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011f0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80011f4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80011f8:	20000038 	.word	0x20000038

080011fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC1_IRQHandler>
	...

08001200 <__libc_init_array>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	2600      	movs	r6, #0
 8001204:	4d0c      	ldr	r5, [pc, #48]	; (8001238 <__libc_init_array+0x38>)
 8001206:	4c0d      	ldr	r4, [pc, #52]	; (800123c <__libc_init_array+0x3c>)
 8001208:	1b64      	subs	r4, r4, r5
 800120a:	10a4      	asrs	r4, r4, #2
 800120c:	42a6      	cmp	r6, r4
 800120e:	d109      	bne.n	8001224 <__libc_init_array+0x24>
 8001210:	2600      	movs	r6, #0
 8001212:	f000 f819 	bl	8001248 <_init>
 8001216:	4d0a      	ldr	r5, [pc, #40]	; (8001240 <__libc_init_array+0x40>)
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <__libc_init_array+0x44>)
 800121a:	1b64      	subs	r4, r4, r5
 800121c:	10a4      	asrs	r4, r4, #2
 800121e:	42a6      	cmp	r6, r4
 8001220:	d105      	bne.n	800122e <__libc_init_array+0x2e>
 8001222:	bd70      	pop	{r4, r5, r6, pc}
 8001224:	00b3      	lsls	r3, r6, #2
 8001226:	58eb      	ldr	r3, [r5, r3]
 8001228:	4798      	blx	r3
 800122a:	3601      	adds	r6, #1
 800122c:	e7ee      	b.n	800120c <__libc_init_array+0xc>
 800122e:	00b3      	lsls	r3, r6, #2
 8001230:	58eb      	ldr	r3, [r5, r3]
 8001232:	4798      	blx	r3
 8001234:	3601      	adds	r6, #1
 8001236:	e7f2      	b.n	800121e <__libc_init_array+0x1e>
 8001238:	08001290 	.word	0x08001290
 800123c:	08001290 	.word	0x08001290
 8001240:	08001290 	.word	0x08001290
 8001244:	08001294 	.word	0x08001294

08001248 <_init>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124e:	bc08      	pop	{r3}
 8001250:	469e      	mov	lr, r3
 8001252:	4770      	bx	lr

08001254 <_fini>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125a:	bc08      	pop	{r3}
 800125c:	469e      	mov	lr, r3
 800125e:	4770      	bx	lr
