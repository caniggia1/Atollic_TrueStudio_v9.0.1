
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000720  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007e0  080007e0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080007e0  080007e0  000107e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080007e4  080007e4  000107e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080007e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  20000004  080007ec  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000002c  080007ec  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001b42  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000075b  00000000  00000000  00021b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002b0  00000000  00000000  000222d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00022580  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000f54  00000000  00000000  000227d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000dd7  00000000  00000000  0002372c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00024503  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000008bc  00000000  00000000  00024580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080007c8 	.word	0x080007c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080007c8 	.word	0x080007c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e07c      	b.n	8000336 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800023c:	2201      	movs	r2, #1
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	409a      	lsls	r2, r3
 8000242:	0013      	movs	r3, r2
 8000244:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	4013      	ands	r3, r2
 800024e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	429a      	cmp	r2, r3
 8000256:	d16b      	bne.n	8000330 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d003      	beq.n	8000268 <GPIO_Init+0x48>
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	791b      	ldrb	r3, [r3, #4]
 8000264:	2b02      	cmp	r3, #2
 8000266:	d134      	bne.n	80002d2 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	0052      	lsls	r2, r2, #1
 8000270:	2103      	movs	r1, #3
 8000272:	4091      	lsls	r1, r2
 8000274:	000a      	movs	r2, r1
 8000276:	43d2      	mvns	r2, r2
 8000278:	401a      	ands	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	689a      	ldr	r2, [r3, #8]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	795b      	ldrb	r3, [r3, #5]
 8000286:	0019      	movs	r1, r3
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	4099      	lsls	r1, r3
 800028e:	000b      	movs	r3, r1
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	889b      	ldrh	r3, [r3, #4]
 800029a:	b29b      	uxth	r3, r3
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	b292      	uxth	r2, r2
 80002a0:	0011      	movs	r1, r2
 80002a2:	2201      	movs	r2, #1
 80002a4:	408a      	lsls	r2, r1
 80002a6:	b292      	uxth	r2, r2
 80002a8:	43d2      	mvns	r2, r2
 80002aa:	b292      	uxth	r2, r2
 80002ac:	4013      	ands	r3, r2
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	889b      	ldrh	r3, [r3, #4]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	799b      	ldrb	r3, [r3, #6]
 80002be:	0019      	movs	r1, r3
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	4099      	lsls	r1, r3
 80002c6:	000b      	movs	r3, r1
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	4313      	orrs	r3, r2
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	697a      	ldr	r2, [r7, #20]
 80002d8:	0052      	lsls	r2, r2, #1
 80002da:	2103      	movs	r1, #3
 80002dc:	4091      	lsls	r1, r2
 80002de:	000a      	movs	r2, r1
 80002e0:	43d2      	mvns	r2, r2
 80002e2:	401a      	ands	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	791b      	ldrb	r3, [r3, #4]
 80002f0:	0019      	movs	r1, r3
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	4099      	lsls	r1, r3
 80002f8:	000b      	movs	r3, r1
 80002fa:	431a      	orrs	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	b292      	uxth	r2, r2
 8000308:	0052      	lsls	r2, r2, #1
 800030a:	2103      	movs	r1, #3
 800030c:	4091      	lsls	r1, r2
 800030e:	000a      	movs	r2, r1
 8000310:	43d2      	mvns	r2, r2
 8000312:	401a      	ands	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68da      	ldr	r2, [r3, #12]
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	79db      	ldrb	r3, [r3, #7]
 8000320:	0019      	movs	r1, r3
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	4099      	lsls	r1, r3
 8000328:	000b      	movs	r3, r1
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	3301      	adds	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	2b0f      	cmp	r3, #15
 800033a:	d800      	bhi.n	800033e <GPIO_Init+0x11e>
 800033c:	e77e      	b.n	800023c <GPIO_Init+0x1c>
    }
  }
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b006      	add	sp, #24
 8000344:	bd80      	pop	{r7, pc}

08000346 <GPIO_ToggleBit>:

  * @retval None

  */
void GPIO_ToggleBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	b082      	sub	sp, #8
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	000a      	movs	r2, r1
 8000350:	1cbb      	adds	r3, r7, #2
 8000352:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	8a9b      	ldrh	r3, [r3, #20]
 8000358:	b29a      	uxth	r2, r3
 800035a:	1cbb      	adds	r3, r7, #2
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	4053      	eors	r3, r2
 8000360:	b29a      	uxth	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	829a      	strh	r2, [r3, #20]
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b002      	add	sp, #8
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	000a      	movs	r2, r1
 800037a:	1cfb      	adds	r3, r7, #3
 800037c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800037e:	1cfb      	adds	r3, r7, #3
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <RCC_AHBPeriphClockCmd+0x3c>)
 8000388:	4a08      	ldr	r2, [pc, #32]	; (80003ac <RCC_AHBPeriphClockCmd+0x3c>)
 800038a:	6951      	ldr	r1, [r2, #20]
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	430a      	orrs	r2, r1
 8000390:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000392:	e006      	b.n	80003a2 <RCC_AHBPeriphClockCmd+0x32>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <RCC_AHBPeriphClockCmd+0x3c>)
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <RCC_AHBPeriphClockCmd+0x3c>)
 8000398:	6952      	ldr	r2, [r2, #20]
 800039a:	6879      	ldr	r1, [r7, #4]
 800039c:	43c9      	mvns	r1, r1
 800039e:	400a      	ands	r2, r1
 80003a0:	615a      	str	r2, [r3, #20]
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b002      	add	sp, #8
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	40021000 	.word	0x40021000

080003b0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003b0:	b5b0      	push	{r4, r5, r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	0002      	movs	r2, r0
 80003b8:	6039      	str	r1, [r7, #0]
 80003ba:	1dfb      	adds	r3, r7, #7
 80003bc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80003be:	1dfb      	adds	r3, r7, #7
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b7f      	cmp	r3, #127	; 0x7f
 80003c4:	d932      	bls.n	800042c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80003c6:	4c2f      	ldr	r4, [pc, #188]	; (8000484 <NVIC_SetPriority+0xd4>)
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	001a      	movs	r2, r3
 80003ce:	230f      	movs	r3, #15
 80003d0:	4013      	ands	r3, r2
 80003d2:	3b08      	subs	r3, #8
 80003d4:	0899      	lsrs	r1, r3, #2
 80003d6:	4a2b      	ldr	r2, [pc, #172]	; (8000484 <NVIC_SetPriority+0xd4>)
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	0018      	movs	r0, r3
 80003de:	230f      	movs	r3, #15
 80003e0:	4003      	ands	r3, r0
 80003e2:	3b08      	subs	r3, #8
 80003e4:	089b      	lsrs	r3, r3, #2
 80003e6:	3306      	adds	r3, #6
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	18d3      	adds	r3, r2, r3
 80003ec:	3304      	adds	r3, #4
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	1dfa      	adds	r2, r7, #7
 80003f2:	7812      	ldrb	r2, [r2, #0]
 80003f4:	0010      	movs	r0, r2
 80003f6:	2203      	movs	r2, #3
 80003f8:	4002      	ands	r2, r0
 80003fa:	00d2      	lsls	r2, r2, #3
 80003fc:	20ff      	movs	r0, #255	; 0xff
 80003fe:	4090      	lsls	r0, r2
 8000400:	0002      	movs	r2, r0
 8000402:	43d2      	mvns	r2, r2
 8000404:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	019b      	lsls	r3, r3, #6
 800040a:	20ff      	movs	r0, #255	; 0xff
 800040c:	4018      	ands	r0, r3
 800040e:	1dfb      	adds	r3, r7, #7
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	001d      	movs	r5, r3
 8000414:	2303      	movs	r3, #3
 8000416:	402b      	ands	r3, r5
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	4098      	lsls	r0, r3
 800041c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800041e:	431a      	orrs	r2, r3
 8000420:	1d8b      	adds	r3, r1, #6
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	18e3      	adds	r3, r4, r3
 8000426:	3304      	adds	r3, #4
 8000428:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800042a:	e027      	b.n	800047c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800042c:	4c16      	ldr	r4, [pc, #88]	; (8000488 <NVIC_SetPriority+0xd8>)
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	b25b      	sxtb	r3, r3
 8000434:	089b      	lsrs	r3, r3, #2
 8000436:	4914      	ldr	r1, [pc, #80]	; (8000488 <NVIC_SetPriority+0xd8>)
 8000438:	1dfa      	adds	r2, r7, #7
 800043a:	7812      	ldrb	r2, [r2, #0]
 800043c:	b252      	sxtb	r2, r2
 800043e:	0892      	lsrs	r2, r2, #2
 8000440:	32c0      	adds	r2, #192	; 0xc0
 8000442:	0092      	lsls	r2, r2, #2
 8000444:	5852      	ldr	r2, [r2, r1]
 8000446:	1df9      	adds	r1, r7, #7
 8000448:	7809      	ldrb	r1, [r1, #0]
 800044a:	0008      	movs	r0, r1
 800044c:	2103      	movs	r1, #3
 800044e:	4001      	ands	r1, r0
 8000450:	00c9      	lsls	r1, r1, #3
 8000452:	20ff      	movs	r0, #255	; 0xff
 8000454:	4088      	lsls	r0, r1
 8000456:	0001      	movs	r1, r0
 8000458:	43c9      	mvns	r1, r1
 800045a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	0192      	lsls	r2, r2, #6
 8000460:	20ff      	movs	r0, #255	; 0xff
 8000462:	4010      	ands	r0, r2
 8000464:	1dfa      	adds	r2, r7, #7
 8000466:	7812      	ldrb	r2, [r2, #0]
 8000468:	0015      	movs	r5, r2
 800046a:	2203      	movs	r2, #3
 800046c:	402a      	ands	r2, r5
 800046e:	00d2      	lsls	r2, r2, #3
 8000470:	4090      	lsls	r0, r2
 8000472:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000474:	430a      	orrs	r2, r1
 8000476:	33c0      	adds	r3, #192	; 0xc0
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	511a      	str	r2, [r3, r4]
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bdb0      	pop	{r4, r5, r7, pc}
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	e000e100 	.word	0xe000e100

0800048c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3b01      	subs	r3, #1
 8000498:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <SysTick_Config+0x40>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d901      	bls.n	80004a2 <SysTick_Config+0x16>
 800049e:	2301      	movs	r3, #1
 80004a0:	e010      	b.n	80004c4 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <SysTick_Config+0x44>)
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	3a01      	subs	r2, #1
 80004a8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80004aa:	2301      	movs	r3, #1
 80004ac:	425b      	negs	r3, r3
 80004ae:	2103      	movs	r1, #3
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ff7d 	bl	80003b0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <SysTick_Config+0x44>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <SysTick_Config+0x44>)
 80004be:	2207      	movs	r2, #7
 80004c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80004c2:	2300      	movs	r3, #0
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b002      	add	sp, #8
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	00ffffff 	.word	0x00ffffff
 80004d0:	e000e010 	.word	0xe000e010

080004d4 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	   this is done through SystemInit() function which is called from startup
	   file (startup_stm32f0xx.s) before to branch to application main.
	   To reconfigure the default setting of SystemInit() function, refer to
	   system_stm32f0xx.c file
  */
  SysTick_Config(SystemCoreClock / 1000);
 80004da:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <main+0x80>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	0099      	lsls	r1, r3, #2
 80004e2:	0010      	movs	r0, r2
 80004e4:	f7ff fe10 	bl	8000108 <__udivsi3>
 80004e8:	0003      	movs	r3, r0
 80004ea:	0018      	movs	r0, r3
 80004ec:	f7ff ffce 	bl	800048c <SysTick_Config>

  /* GPIOC Periph clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	031b      	lsls	r3, r3, #12
 80004f4:	2101      	movs	r1, #1
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff ff3a 	bl	8000370 <RCC_AHBPeriphClockCmd>

  /* Configure PC8 and PC9 in output pushpull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <main+0x84>)
 80004fe:	22c0      	movs	r2, #192	; 0xc0
 8000500:	0092      	lsls	r2, r2, #2
 8000502:	601a      	str	r2, [r3, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <main+0x84>)
 8000506:	2201      	movs	r2, #1
 8000508:	711a      	strb	r2, [r3, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <main+0x84>)
 800050c:	2200      	movs	r2, #0
 800050e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <main+0x84>)
 8000512:	2203      	movs	r2, #3
 8000514:	715a      	strb	r2, [r3, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <main+0x84>)
 8000518:	2200      	movs	r2, #0
 800051a:	71da      	strb	r2, [r3, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <main+0x84>)
 800051e:	4a0f      	ldr	r2, [pc, #60]	; (800055c <main+0x88>)
 8000520:	0019      	movs	r1, r3
 8000522:	0010      	movs	r0, r2
 8000524:	f7ff fe7c 	bl	8000220 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_9, Bit_RESET);
    GPIO_WriteBit(GPIOC, GPIO_Pin_8, Bit_SET);
    Delay(500);
*/

	GPIO_ToggleBit(GPIOC, GPIO_Pin_9 | GPIO_Pin_8);
 8000528:	23c0      	movs	r3, #192	; 0xc0
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <main+0x88>)
 800052e:	0019      	movs	r1, r3
 8000530:	0010      	movs	r0, r2
 8000532:	f7ff ff08 	bl	8000346 <GPIO_ToggleBit>
 8000536:	23fa      	movs	r3, #250	; 0xfa
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
  uint32_t msStart = millis;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <main+0x8c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	603b      	str	r3, [r7, #0]
  while(millis - msStart < msDelay);
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <main+0x8c>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	d8f8      	bhi.n	8000542 <main+0x6e>
	GPIO_ToggleBit(GPIOC, GPIO_Pin_9 | GPIO_Pin_8);
 8000550:	e7ea      	b.n	8000528 <main+0x54>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	20000000 	.word	0x20000000
 8000558:	20000020 	.word	0x20000020
 800055c:	48000800 	.word	0x48000800
 8000560:	20000028 	.word	0x20000028

08000564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000564:	4813      	ldr	r0, [pc, #76]	; (80005b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000566:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000568:	2004      	movs	r0, #4
    LDR R1, [R0]
 800056a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800056c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800056e:	221f      	movs	r2, #31
    CMP R1, R2
 8000570:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000572:	d105      	bne.n	8000580 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8000576:	2101      	movs	r1, #1
    STR R1, [R0]
 8000578:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800057a:	4810      	ldr	r0, [pc, #64]	; (80005bc <LoopForever+0xa>)
    LDR R1,=0x00000000
 800057c:	2100      	movs	r1, #0
    STR R1, [R0]
 800057e:	6001      	str	r1, [r0, #0]

08000580 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000580:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000582:	e003      	b.n	800058c <LoopCopyDataInit>

08000584 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <LoopForever+0xe>)
  ldr r3, [r3, r1]
 8000586:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000588:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800058a:	3104      	adds	r1, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopForever+0x12>)
  ldr r3, =_edata
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <LoopForever+0x16>)
  adds r2, r0, r1
 8000590:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000592:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000594:	d3f6      	bcc.n	8000584 <CopyDataInit>
  ldr r2, =_sbss
 8000596:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <LoopForever+0x1a>)
  b LoopFillZerobss
 8000598:	e002      	b.n	80005a0 <LoopFillZerobss>

0800059a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  str  r3, [r2]
 800059c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059e:	3204      	adds	r2, #4

080005a0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <LoopForever+0x1e>)
  cmp r2, r3
 80005a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005a4:	d3f9      	bcc.n	800059a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005a6:	f000 f835 	bl	8000614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005aa:	f000 f8e9 	bl	8000780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ae:	f7ff ff91 	bl	80004d4 <main>

080005b2 <LoopForever>:
  
LoopForever:
    b LoopForever
 80005b2:	e7fe      	b.n	80005b2 <LoopForever>
  ldr   r0, =_estack
 80005b4:	20002000 	.word	0x20002000
    LDR R0,=0x40021018
 80005b8:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 80005bc:	40010000 	.word	0x40010000
  ldr r3, =_sidata
 80005c0:	080007e8 	.word	0x080007e8
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005c8:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80005cc:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80005d0:	2000002c 	.word	0x2000002c

080005d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_IRQHandler>

080005d6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <HardFault_Handler+0x4>

080005e6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  millis++;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <SysTick_Handler+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	4b02      	ldr	r3, [pc, #8]	; (8000610 <SysTick_Handler+0x14>)
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000028 	.word	0x20000028

08000614 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <SystemInit+0x74>)
 800061a:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <SystemInit+0x74>)
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	2101      	movs	r1, #1
 8000620:	430a      	orrs	r2, r1
 8000622:	601a      	str	r2, [r3, #0]
#if defined(STM32F051)   
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <SystemInit+0x74>)
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <SystemInit+0x74>)
 8000628:	6852      	ldr	r2, [r2, #4]
 800062a:	4918      	ldr	r1, [pc, #96]	; (800068c <SystemInit+0x78>)
 800062c:	400a      	ands	r2, r1
 800062e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <SystemInit+0x74>)
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <SystemInit+0x74>)
 8000634:	6812      	ldr	r2, [r2, #0]
 8000636:	4916      	ldr	r1, [pc, #88]	; (8000690 <SystemInit+0x7c>)
 8000638:	400a      	ands	r2, r1
 800063a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <SystemInit+0x74>)
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <SystemInit+0x74>)
 8000640:	6812      	ldr	r2, [r2, #0]
 8000642:	4914      	ldr	r1, [pc, #80]	; (8000694 <SystemInit+0x80>)
 8000644:	400a      	ands	r2, r1
 8000646:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <SystemInit+0x74>)
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <SystemInit+0x74>)
 800064c:	6852      	ldr	r2, [r2, #4]
 800064e:	4912      	ldr	r1, [pc, #72]	; (8000698 <SystemInit+0x84>)
 8000650:	400a      	ands	r2, r1
 8000652:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <SystemInit+0x74>)
 8000656:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <SystemInit+0x74>)
 8000658:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800065a:	210f      	movs	r1, #15
 800065c:	438a      	bics	r2, r1
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <SystemInit+0x74>)
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <SystemInit+0x74>)
 8000664:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000666:	490d      	ldr	r1, [pc, #52]	; (800069c <SystemInit+0x88>)
 8000668:	400a      	ands	r2, r1
 800066a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <SystemInit+0x74>)
 800066e:	4a06      	ldr	r2, [pc, #24]	; (8000688 <SystemInit+0x74>)
 8000670:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000672:	2101      	movs	r1, #1
 8000674:	438a      	bics	r2, r1
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <SystemInit+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800067e:	f000 f80f 	bl	80006a0 <SetSysClock>
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	08ffb80c 	.word	0x08ffb80c
 8000690:	fef6ffff 	.word	0xfef6ffff
 8000694:	fffbffff 	.word	0xfffbffff
 8000698:	ffc0ffff 	.word	0xffc0ffff
 800069c:	fffffeac 	.word	0xfffffeac

080006a0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <SetSysClock+0xd4>)
 80006b0:	4a30      	ldr	r2, [pc, #192]	; (8000774 <SetSysClock+0xd4>)
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0249      	lsls	r1, r1, #9
 80006b8:	430a      	orrs	r2, r1
 80006ba:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006bc:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <SetSysClock+0xd4>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	029b      	lsls	r3, r3, #10
 80006c4:	4013      	ands	r3, r2
 80006c6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3301      	adds	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d104      	bne.n	80006de <SetSysClock+0x3e>
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	23a0      	movs	r3, #160	; 0xa0
 80006d8:	01db      	lsls	r3, r3, #7
 80006da:	429a      	cmp	r2, r3
 80006dc:	d1ee      	bne.n	80006bc <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <SetSysClock+0xd4>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	029b      	lsls	r3, r3, #10
 80006e6:	4013      	ands	r3, r2
 80006e8:	d002      	beq.n	80006f0 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 80006ea:	2301      	movs	r3, #1
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	e001      	b.n	80006f4 <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d138      	bne.n	800076c <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SetSysClock+0xd8>)
 80006fc:	2211      	movs	r2, #17
 80006fe:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <SetSysClock+0xd4>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <SetSysClock+0xd4>)
 8000704:	6852      	ldr	r2, [r2, #4]
 8000706:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <SetSysClock+0xd4>)
 800070a:	4a1a      	ldr	r2, [pc, #104]	; (8000774 <SetSysClock+0xd4>)
 800070c:	6852      	ldr	r2, [r2, #4]
 800070e:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <SetSysClock+0xd4>)
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <SetSysClock+0xd4>)
 8000714:	6852      	ldr	r2, [r2, #4]
 8000716:	4919      	ldr	r1, [pc, #100]	; (800077c <SetSysClock+0xdc>)
 8000718:	400a      	ands	r2, r1
 800071a:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <SetSysClock+0xd4>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <SetSysClock+0xd4>)
 8000720:	6852      	ldr	r2, [r2, #4]
 8000722:	2188      	movs	r1, #136	; 0x88
 8000724:	0349      	lsls	r1, r1, #13
 8000726:	430a      	orrs	r2, r1
 8000728:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <SetSysClock+0xd4>)
 800072c:	4a11      	ldr	r2, [pc, #68]	; (8000774 <SetSysClock+0xd4>)
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0449      	lsls	r1, r1, #17
 8000734:	430a      	orrs	r2, r1
 8000736:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <SetSysClock+0xd4>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	049b      	lsls	r3, r3, #18
 8000742:	4013      	ands	r3, r2
 8000744:	d0f9      	beq.n	800073a <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <SetSysClock+0xd4>)
 8000748:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <SetSysClock+0xd4>)
 800074a:	6852      	ldr	r2, [r2, #4]
 800074c:	2103      	movs	r1, #3
 800074e:	438a      	bics	r2, r1
 8000750:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <SetSysClock+0xd4>)
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <SetSysClock+0xd4>)
 8000756:	6852      	ldr	r2, [r2, #4]
 8000758:	2102      	movs	r1, #2
 800075a:	430a      	orrs	r2, r1
 800075c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SetSysClock+0xd4>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	220c      	movs	r2, #12
 8000766:	4013      	ands	r3, r2
 8000768:	2b08      	cmp	r3, #8
 800076a:	d1f9      	bne.n	8000760 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b002      	add	sp, #8
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	40022000 	.word	0x40022000
 800077c:	ffc07fff 	.word	0xffc07fff

08000780 <__libc_init_array>:
 8000780:	b570      	push	{r4, r5, r6, lr}
 8000782:	2600      	movs	r6, #0
 8000784:	4d0c      	ldr	r5, [pc, #48]	; (80007b8 <__libc_init_array+0x38>)
 8000786:	4c0d      	ldr	r4, [pc, #52]	; (80007bc <__libc_init_array+0x3c>)
 8000788:	1b64      	subs	r4, r4, r5
 800078a:	10a4      	asrs	r4, r4, #2
 800078c:	42a6      	cmp	r6, r4
 800078e:	d109      	bne.n	80007a4 <__libc_init_array+0x24>
 8000790:	2600      	movs	r6, #0
 8000792:	f000 f819 	bl	80007c8 <_init>
 8000796:	4d0a      	ldr	r5, [pc, #40]	; (80007c0 <__libc_init_array+0x40>)
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <__libc_init_array+0x44>)
 800079a:	1b64      	subs	r4, r4, r5
 800079c:	10a4      	asrs	r4, r4, #2
 800079e:	42a6      	cmp	r6, r4
 80007a0:	d105      	bne.n	80007ae <__libc_init_array+0x2e>
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	00b3      	lsls	r3, r6, #2
 80007a6:	58eb      	ldr	r3, [r5, r3]
 80007a8:	4798      	blx	r3
 80007aa:	3601      	adds	r6, #1
 80007ac:	e7ee      	b.n	800078c <__libc_init_array+0xc>
 80007ae:	00b3      	lsls	r3, r6, #2
 80007b0:	58eb      	ldr	r3, [r5, r3]
 80007b2:	4798      	blx	r3
 80007b4:	3601      	adds	r6, #1
 80007b6:	e7f2      	b.n	800079e <__libc_init_array+0x1e>
 80007b8:	080007e0 	.word	0x080007e0
 80007bc:	080007e0 	.word	0x080007e0
 80007c0:	080007e0 	.word	0x080007e0
 80007c4:	080007e4 	.word	0x080007e4

080007c8 <_init>:
 80007c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ce:	bc08      	pop	{r3}
 80007d0:	469e      	mov	lr, r3
 80007d2:	4770      	bx	lr

080007d4 <_fini>:
 80007d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007da:	bc08      	pop	{r3}
 80007dc:	469e      	mov	lr, r3
 80007de:	4770      	bx	lr
